(ns ^{:doc "Worlds(and states) required for ops-search"
      :author "DGM"}
OpsSearch.worlds)


;;World 1

;;World state
;; 0 1 2 3 4 5 6 7 8 9 0
;; 1 A - - - B     C - -
;; 2   - D   E - -   - -
;; 3 F   G - - - - H   I
;; 4   - - - J   K - -
;; 5   - - - L         M
;; 6 N   O - - - - - -
;; 7 - -   - - - P     Q
;; 8 R   S   T - - - -
;; 9 - - - - U     V   W
;; 0 - - - - - - - X - -

;;Contains all the nodes that make up the world, what other nodes they are connected to and their coordinates.
(def world1-nodeRules
  '#{(connects nodeA nodeF)
     (connects nodeB nodeC)
     (connects nodeB nodeE)
     (connects nodeC nodeB)
     (connects nodeC nodeH)
     (connects nodeD nodeE)
     (connects nodeD nodeG)
     (connects nodeE nodeB)
     (connects nodeE nodeD)
     (connects nodeF nodeA)
     (connects nodeF nodeG)
     (connects nodeF nodeN)
     (connects nodeG nodeD)
     (connects nodeG nodeF)
     (connects nodeH nodeC)
     (connects nodeH nodeI)
     (connects nodeI nodeH)
     (connects nodeI nodeM)
     (connects nodeJ nodeK)
     (connects nodeJ nodeL)
     (connects nodeK nodeJ)
     (connects nodeL nodeJ)
     (connects nodeL nodeM)
     (connects nodeM nodeI)
     (connects nodeM nodeL)
     (connects nodeM nodeQ)
     (connects nodeN nodeF)
     (connects nodeN nodeO)
     (connects nodeO nodeN)
     (connects nodeO nodeS)
     (connects nodeP nodeQ)
     (connects nodeQ nodeM)
     (connects nodeQ nodeP)
     (connects nodeQ nodeW)
     (connects nodeR nodeS)
     (connects nodeS nodeO)
     (connects nodeS nodeR)
     (connects nodeS nodeT)
     (connects nodeT nodeS)
     (connects nodeT nodeU)
     (connects nodeU nodeT)
     (connects nodeU nodeV)
     (connects nodeV nodeU)
     (connects nodeV nodeW)
     (connects nodeV nodeX)
     (connects nodeW nodeQ)
     (connects nodeW nodeV)
     (connects nodeX nodeV)
     (at-xy nodeA (0, 0))
     (at-xy nodeB (4, 0))
     (at-xy nodeC (7, 0))
     (at-xy nodeD (2, 1))
     (at-xy nodeE (4, 1))
     (at-xy nodeF (0, 2))
     (at-xy nodeG (2, 2))
     (at-xy nodeH (7, 2))
     (at-xy nodeI (9, 2))
     (at-xy nodeJ (4, 3))
     (at-xy nodeK (6, 3))
     (at-xy nodeL (4, 4))
     (at-xy nodeM (9, 4))
     (at-xy nodeN (0, 5))
     (at-xy nodeO (2, 5))
     (at-xy nodeP (6, 6))
     (at-xy nodeQ (9, 6))
     (at-xy nodeR (0, 7))
     (at-xy nodeS (2, 7))
     (at-xy nodeT (4, 7))
     (at-xy nodeU (4, 8))
     (at-xy nodeV (7, 8))
     (at-xy nodeW (9, 8))
     (at-xy nodeX (7, 9))
     })

;;Contains all agent related rules.  agent.
(def world1-agentRules-1agents
  '#{(agent R)
     (at R nodeX)
     })

;;Contains all agent related rules. 2 agents.
(def world1-agentRules-2agents
  '#{(agent R)
     (agent A)
     (at R nodeA)
     (at A nodeC)
     })

;;Contains all agent related rules. 3 agents.
(def world1-agentRules-3agents
  '#{(agent R)
     (agent A)
     (agent B)
     (at R nodeA)
     (at A nodeC)
     (at B nodeC)
     })

(def world1-test1
  (concat world1-nodeRules world1-agentRules-1agents))

(def world1-test2
  (concat world1-nodeRules world1-agentRules-2agents))

(def world1-test3
  (concat world1-nodeRules world1-agentRules-3agents))


;;World 2

;;World state
;;0 1 2 3
;;1 A   B
;;2 - -
;;3 - D C

;;Door can be found at C connecting to D, key can be found at B.
(def world2-nodeRules
  '#{(connects nodeA nodeB)
     (connects nodeB nodeA)
     (connects nodeB nodeC)
     (connects nodeC nodeB)
     (connects nodeC redDoor)
     (connects nodeD redDoor)
     (isa nodeA node)
     (isa nodeB node)
     (isa nodeC node)
     (isa nodeD node)
     }
  )

(def world2-DoorKeyRules
  '#{(at redDoor nodeC)
     (isa redDoor door)
     (locked redDoor)
     (connects redDoor nodeC)
     (connects redDoor nodeD)
     (color redDoor Red)

     (isa redKey key)
     (manipulable redKey)
     (at redKey nodeB)
     (color redKey Red)
     }
  )

(def world2-agentRules-1agents
  '#{
     (agent R)
     (at R nodeA)
     (holding R nil)
     }
  )

;;Jail break!
(def world2-agentRules-2agents
  '#{
     (agent R)
     (at R nodeA)
     (holding R nil)

     (agent B)
     (at B nodeD)
     (holding B nil)
     }
  )

(def world2-test1
  (concat world2-nodeRules world2-agentRules-1agents world2-DoorKeyRules))

(def world2-test2
  (concat world2-nodeRules world2-agentRules-2agents world2-DoorKeyRules))


;;World 3

;;World state
;; 0 1 2 3 4 5 6 7 8 9 0
;; 1 A - - - B     C - -
;; 2   - D   E - -   - -
;; 3 F   G - - - - H   I
;; 4   - - - J   K - -
;; 5   - - - L         M
;; 6 N   O - - - - - -
;; 7 - -   - - - P     Q
;; 8 R   S   T - - - -
;; 9 - - - - U     V   W
;; 0 - - - - - - - X - -

;;Door can be found at S connecting to R, key can be found at node E. Door can be found at M, key can be found at node R
;;Contains all the nodes that make up the world, what other nodes they are connected to and their coordinates.
(def world3-nodeRules
  '#{(connects nodeA nodeF)
     (connects nodeB nodeC)
     (connects nodeB nodeE)
     (connects nodeC nodeB)
     (connects nodeC nodeH)
     (connects nodeD nodeE)
     (connects nodeD nodeG)
     (connects nodeE nodeB)
     (connects nodeE nodeD)
     (connects nodeF nodeA)
     (connects nodeF nodeG)
     (connects nodeF nodeN)
     (connects nodeG nodeD)
     (connects nodeG nodeF)
     (connects nodeH nodeC)
     (connects nodeH nodeI)
     (connects nodeI nodeH)
     (connects nodeI nodeM)
     (connects nodeJ nodeK)
     (connects nodeJ nodeL)
     (connects nodeK nodeJ)
     (connects nodeL nodeJ)
     (connects nodeL greenDoor)
     (connects nodeM nodeI)
     (connects nodeM greenDoor)
     (connects nodeM nodeQ)
     (connects nodeN nodeF)
     (connects nodeN nodeO)
     (connects nodeO nodeN)
     (connects nodeO nodeS)
     (connects nodeP nodeQ)
     (connects nodeQ nodeM)
     (connects nodeQ nodeP)
     (connects nodeQ nodeW)
     (connects nodeR redDoor) ;Door acts as new node.
     (connects nodeS nodeO)
     (connects nodeS redDoor) ;Door acts as new node.
     (connects nodeS nodeT)
     (connects nodeT nodeS)
     (connects nodeT nodeU)
     (connects nodeU nodeT)
     (connects nodeU nodeV)
     (connects nodeV nodeU)
     (connects nodeV nodeW)
     (connects nodeV nodeX)
     (connects nodeW nodeQ)
     (connects nodeW nodeV)
     (connects nodeX nodeV)
     (isa nodeA node)
     (isa nodeB node)
     (isa nodeC node)
     (isa nodeD node)
     (isa nodeE node)
     (isa nodeF node)
     (isa nodeG node)
     (isa nodeH node)
     (isa nodeI node)
     (isa nodeJ node)
     (isa nodeK node)
     (isa nodeL node)
     (isa nodeM node)
     (isa nodeN node)
     (isa nodeO node)
     (isa nodeP node)
     (isa nodeQ node)
     (isa nodeR node)
     (isa nodeS node)
     (isa nodeT node)
     (isa nodeU node)
     (isa nodeV node)
     (isa nodeW node)
     (isa nodeX node)
     (at-xy nodeA (0, 0))
     (at-xy nodeB (4, 0))
     (at-xy nodeC (7, 0))
     (at-xy nodeD (2, 1))
     (at-xy nodeE (4, 1))
     (at-xy nodeF (0, 2))
     (at-xy nodeG (2, 2))
     (at-xy nodeH (7, 2))
     (at-xy nodeI (9, 2))
     (at-xy nodeJ (4, 3))
     (at-xy nodeK (6, 3))
     (at-xy nodeL (4, 4))
     (at-xy nodeM (9, 4))
     (at-xy nodeN (0, 5))
     (at-xy nodeO (2, 5))
     (at-xy nodeP (6, 6))
     (at-xy nodeQ (9, 6))
     (at-xy nodeR (0, 7))
     (at-xy nodeS (2, 7))
     (at-xy nodeT (4, 7))
     (at-xy nodeU (4, 8))
     (at-xy nodeV (7, 8))
     (at-xy nodeW (9, 8))
     (at-xy nodeX (7, 9))
     })

(def world3-DoorKeyRules
  '#{
     (at redDoor nodeS)
     (isa redDoor door)
     (locked redDoor)
     (connects redDoor nodeS)
     (connects redDoor nodeR)
     (color redDoor Red)

     (isa redKey key)
     (manipulable redKey)
     (at redKey nodeE)
     (color redKey Red)

     (at greenDoor nodeM)
     (isa greenDoor door)
     (locked greenDoor)
     (connects greenDoor nodeM)
     (connects greenDoor nodeL)
     (color greenDoor Green)

     (isa greenKey key)
     (manipulable greenKey)
     (at greenKey nodeR)
     (color greenKey Green)
     }
  )

;;Contains all agent related rules. 1 agents.
(def world3-agentRules-1agents
  '#{(agent R)
     (at R nodeA)
     (holding R nil)
     })

;;Contains all agent related rules. 2 agents.
(def world3-agentRules-2agents
  '#{(agent R)
     (agent B)
     (at R nodeA)
     (at B nodeJ)
     (holding R nil)
     (holding B nil)
     })

(def world3-test1
  (concat world3-nodeRules world3-agentRules-1agents world3-DoorKeyRules))

(def world3-test2
  (concat world3-nodeRules world3-agentRules-2agents world3-DoorKeyRules))



;;World 4

(def world4-nodeRules
  '#{(connects node1 node9)
     (connects node2 node3)
     (connects node3 node2) (connects node3 node4) (connects node3 node12)
     (connects node4 node3) (connects node4 node5) (connects node4 node20)
     (connects node5 node4) (connects node5 node13)
     (connects node6 node7) (connects node6 node14)
     (connects node7 node6) (connects node7 node8) (connects node7 node22)
     (connects node8 node7) (connects node8 node15)
     (connects node9 node1) (connects node9 node10)
     (connects node10 node9) (connects node10 node11) (connects node10 node17)
     (connects node11 node10) (connects node11 node12) (connects node11 node18)
     (connects node12 node3) (connects node12 node11)
     (connects node13 node5) (connects node13 node14)
     (connects node14 node6) (connects node14 node13)
     (connects node15 node8)
     (connects node16 node17)
     (connects node17 node10) (connects node17 node16)
     (connects node18 node11) (connects node18 node19) (connects node18 node26)
     (connects node19 node18)
     (connects node20 node4) (connects node20 node21) (connects node20 node27)
     (connects node21 node20) (connects node21 node22) (connects node21 node30)
     (connects node22 node7) (connects node22 node21) (connects node22 node23)
     (connects node23 node22) (connects node23 node32)
     (connects node24 node25)
     (connects node25 node24) (connects node25 node26) (connects node25 node34)
     (connects node26 node18) (connects node26 node25)
     (connects node27 node20) (connects node27 node28)
     (connects node28 node27) (connects node28 node46)
     (connects node29 node30) (connects node29 node37)
     (connects node30 node21) (connects node30 node29)
     (connects node31 node32) (connects node31 node39)
     (connects node32 node23) (connects node32 node31)
     (connects node33 node34)
     (connects node34 node25) (connects node34 node33) (connects node34 node35)
     (connects node35 node34) (connects node35 node36) (connects node35 node44)
     (connects node36 node35) (connects node36 node45)
     (connects node37 node29) (connects node37 node38) (connects node37 node51)
     (connects node38 node37) (connects node38 node39) (connects node38 node56)
     (connects node39 node31) (connects node39 node38) (connects node39 node40)
     (connects node40 node39) (connects node40 node41)
     (connects node41 node40) (connects node41 node48)
     (connects node42 node43) (connects node42 node52)
     (connects node43 node42) (connects node43 node44) (connects node43 node49)
     (connects node44 node35) (connects node44 node43)
     (connects node45 node36) (connects node45 node46)
     (connects node46 node45) (connects node46 node28)
     (connects node47 node48) (connects node47 node57)
     (connects node48 node41) (connects node48 node47)
     (connects node49 node43) (connects node49 node50)
     (connects node50 node49) (connects node50 node51) (connects node50 node53)
     (connects node51 node37) (connects node51 node50)
     (connects node52 node42) (connects node52 node53)
     (connects node53 node50) (connects node53 node52) (connects node53 node54)
     (connects node54 node53)
     (connects node55 node56)
     (connects node56 node38) (connects node56 node55)
     (connects node57 node47) (connects node57 node58)
     (connects node58 node57)

     (at-xy node1 (0,0))
     (at-xy node2 (2,0))
     (at-xy node3 (4,0))
     (at-xy node4 (6,0))
     (at-xy node5 (8,0))
     (at-xy node6 (10,0))
     (at-xy node7 (12,0))
     (at-xy node8 (14,0))
     (at-xy node9 (0,2))
     (at-xy node10 (1,2))
     (at-xy node11 (3,2))
     (at-xy node12 (4,2))
     (at-xy node13 (8,2))
     (at-xy node14 (10,2))
     (at-xy node15 (14,2))
     (at-xy node16 (0,4))
     (at-xy node17 (1,4))
     (at-xy node18 (3,4))
     (at-xy node19 (4,4))
     (at-xy node20 (6,4))
     (at-xy node21 (11,4))
     (at-xy node22 (12,4))
     (at-xy node23 (14,4))
     (at-xy node24 (0,6))
     (at-xy node25 (1,6))
     (at-xy node26 (3,6))
     (at-xy node27 (6,6))
     (at-xy node28 (7,6))
     (at-xy node29 (9,6))
     (at-xy node30 (11,6))
     (at-xy node31 (13,6))
     (at-xy node32 (14,6))
     (at-xy node33 (0,8))
     (at-xy node34 (1,8))
     (at-xy node35 (3,8))
     (at-xy node36 (5,8))
     (at-xy node37 (9,8))
     (at-xy node38 (11,8))
     (at-xy node39 (13,8))
     (at-xy node40 (13,9))
     (at-xy node41 (14,9))
     (at-xy node42 (0,10))
     (at-xy node43 (2,10))
     (at-xy node44 (3,10))
     (at-xy node45 (5,10))
     (at-xy node46 (7,10))
     (at-xy node47 (13,11))
     (at-xy node48 (14,11))
     (at-xy node49 (2,12))
     (at-xy node50 (7,12))
     (at-xy node51 (9,12))
     (at-xy node52 (0,14))
     (at-xy node53 (7,14))
     (at-xy node54 (8,14))
     (at-xy node55 (10,14))
     (at-xy node56 (11,14))
     (at-xy node57 (13,14))
     (at-xy node58 (14,14))

     (isa node1 node)
     (isa node2 node)
     (isa node3 node)
     (isa node4 node)
     (isa node5 node)
     (isa node6 node)
     (isa node7 node)
     (isa node8 node)
     (isa node9 node)
     (isa node10 node)
     (isa node11 node)
     (isa node12 node)
     (isa node13 node)
     (isa node14 node)
     (isa node15 node)
     (isa node16 node)
     (isa node17 node)
     (isa node18 node)
     (isa node19 node)
     (isa node20 node)
     (isa node21 node)
     (isa node22 node)
     (isa node23 node)
     (isa node24 node)
     (isa node25 node)
     (isa node26 node)
     (isa node27 node)
     (isa node28 node)
     (isa node29 node)
     (isa node30 node)
     (isa node31 node)
     (isa node32 node)
     (isa node33 node)
     (isa node34 node)
     (isa node35 node)
     (isa node36 node)
     (isa node37 node)
     (isa node38 node)
     (isa node39 node)
     (isa node40 node)
     (isa node41 node)
     (isa node42 node)
     (isa node43 node)
     (isa node44 node)
     (isa node45 node)
     (isa node46 node)
     (isa node47 node)
     (isa node48 node)
     (isa node49 node)
     (isa node50 node)
     (isa node51 node)
     (isa node52 node)
     (isa node53 node)
     (isa node54 node)
     (isa node55 node)
     (isa node56 node)
     (isa node57 node)
     (isa node58 node)

     })

(def world4-agentRules-1agents
  '#{(agent R)
     (at R node2)
     (holding R nil)
     })

(def world4-agentRules-2agents
  '#{(agent R)
     (agent B)
     (at R node1)
     (at B node47)
     (holding R nil)
     (holding B nil)
     })

(def world4-test1
  (concat world4-nodeRules world4-agentRules-1agents))

(def world4-test2
  (concat world4-nodeRules world4-agentRules-2agents))


;World 5

(def world5-nodeRules
  '#{(connects node1 node9)
     (connects node2 node3)
     (connects node3 node2) (connects node3 node4) (connects node3 node12)
     (connects node4 node3) (connects node4 node5) (connects node4 node20)
     (connects node5 node4) (connects node5 node13)
     (connects node6 node7) (connects node6 node14)
     (connects node7 node6) (connects node7 node8) (connects node7 node22)
     (connects node8 node7) (connects node8 node15)
     (connects node9 node1) (connects node9 node10)
     (connects node10 node9) (connects node10 node11) (connects node10 redDoor)
     (connects node11 node10) (connects node11 node12) (connects node11 node18)
     (connects node12 node3) (connects node12 node11)
     (connects node13 node5) (connects node13 node14)
     (connects node14 node6) (connects node14 node13)
     (connects node15 node8)
     (connects node16 node17)
     (connects node17 redDoor) (connects node17 node16)
     (connects node18 node11) (connects node18 node19) (connects node18 node26)
     (connects node19 node18)
     (connects node20 node4) (connects node20 node21) (connects node20 node27)
     (connects node21 node20) (connects node21 node22) (connects node21 node30)
     (connects node22 node7) (connects node22 node21) (connects node22 node23)
     (connects node23 node22) (connects node23 node32)
     (connects node24 node25)
     (connects node25 node24) (connects node25 node26) (connects node25 node34)
     (connects node26 node18) (connects node26 node25)
     (connects node27 node20) (connects node27 node28)
     (connects node28 purpleDoor) (connects node28 node27)
     (connects node29 node30) (connects node29 greenDoor)
     (connects node30 node21) (connects node30 node29)
     (connects node31 blueDoor2) (connects node31 node39)
     (connects node32 node23) (connects node32 blueDoor2)
     (connects node33 node34)
     (connects node34 node25) (connects node34 node33) (connects node34 node35)
     (connects node35 node34) (connects node35 purpleDoor2) (connects node35 node44)
     (connects node36 purpleDoor2) (connects node36 node45)
     (connects node37 greenDoor) (connects node37 pinkDoor) (connects node37 node51)
     (connects node38 pinkDoor) (connects node38 pinkDoor2) (connects node38 node56)
     (connects node39 node31) (connects node39 pinkDoor2) (connects node39 node40)
     (connects node40 node39) (connects node40 node41)
     (connects node41 node40) (connects node41 node48)
     (connects node42 node43) (connects node42 yellowDoor)
     (connects node43 node42) (connects node43 node44) (connects node43 node49)
     (connects node44 node35) (connects node44 node43)
     (connects node45 node36) (connects node45 node46)
     (connects node46 node45) (connects node46 purpleDoor)
     (connects node47 blueDoor) (connects node47 node57)
     (connects node48 node41) (connects node48 blueDoor)
     (connects node49 node43) (connects node49 node50)
     (connects node50 node49) (connects node50 greenDoor2) (connects node50 yellowDoor2)
     (connects node51 node37) (connects node51 greenDoor2)
     (connects node52 yellowDoor) (connects node52 node53)
     (connects node53 yellowDoor2) (connects node53 node52) (connects node53 node54)
     (connects node54 node53)
     (connects node55 node56)
     (connects node56 node38) (connects node56 node55)
     (connects node57 node47) (connects node57 node58)
     (connects node58 node57)

     (at-xy node1 (0,0))
     (at-xy node2 (2,0))
     (at-xy node3 (4,0))
     (at-xy node4 (6,0))
     (at-xy node5 (8,0))
     (at-xy node6 (10,0))
     (at-xy node7 (12,0))
     (at-xy node8 (14,0))
     (at-xy node9 (0,2))
     (at-xy node10 (1,2))
     (at-xy node11 (3,2))
     (at-xy node12 (4,2))
     (at-xy node13 (8,2))
     (at-xy node14 (10,2))
     (at-xy node15 (14,2))
     (at-xy node16 (0,4))
     (at-xy node17 (1,4))
     (at-xy node18 (3,4))
     (at-xy node19 (4,4))
     (at-xy node20 (6,4))
     (at-xy node21 (11,4))
     (at-xy node22 (12,4))
     (at-xy node23 (14,4))
     (at-xy node24 (0,6))
     (at-xy node25 (1,6))
     (at-xy node26 (3,6))
     (at-xy node27 (6,6))
     (at-xy node28 (7,6))
     (at-xy node29 (9,6))
     (at-xy node30 (11,6))
     (at-xy node31 (13,6))
     (at-xy node32 (14,6))
     (at-xy node33 (0,8))
     (at-xy node34 (1,8))
     (at-xy node35 (3,8))
     (at-xy node36 (5,8))
     (at-xy node37 (9,8))
     (at-xy node38 (11,8))
     (at-xy node39 (13,8))
     (at-xy node40 (13,9))
     (at-xy node41 (14,9))
     (at-xy node42 (0,10))
     (at-xy node43 (2,10))
     (at-xy node44 (3,10))
     (at-xy node45 (5,10))
     (at-xy node46 (7,10))
     (at-xy node47 (13,11))
     (at-xy node48 (14,11))
     (at-xy node49 (2,12))
     (at-xy node50 (7,12))
     (at-xy node51 (9,12))
     (at-xy node52 (0,14))
     (at-xy node53 (7,14))
     (at-xy node54 (8,14))
     (at-xy node55 (10,14))
     (at-xy node56 (11,14))
     (at-xy node57 (13,14))
     (at-xy node58 (14,14))

     (isa node1 node)
     (isa node2 node)
     (isa node3 node)
     (isa node4 node)
     (isa node5 node)
     (isa node6 node)
     (isa node7 node)
     (isa node8 node)
     (isa node9 node)
     (isa node10 node)
     (isa node11 node)
     (isa node12 node)
     (isa node13 node)
     (isa node14 node)
     (isa node15 node)
     (isa node16 node)
     (isa node17 node)
     (isa node18 node)
     (isa node19 node)
     (isa node20 node)
     (isa node21 node)
     (isa node22 node)
     (isa node23 node)
     (isa node24 node)
     (isa node25 node)
     (isa node26 node)
     (isa node27 node)
     (isa node28 node)
     (isa node29 node)
     (isa node30 node)
     (isa node31 node)
     (isa node32 node)
     (isa node33 node)
     (isa node34 node)
     (isa node35 node)
     (isa node36 node)
     (isa node37 node)
     (isa node38 node)
     (isa node39 node)
     (isa node40 node)
     (isa node41 node)
     (isa node42 node)
     (isa node43 node)
     (isa node44 node)
     (isa node45 node)
     (isa node46 node)
     (isa node47 node)
     (isa node48 node)
     (isa node49 node)
     (isa node50 node)
     (isa node51 node)
     (isa node52 node)
     (isa node53 node)
     (isa node54 node)
     (isa node55 node)
     (isa node56 node)
     (isa node57 node)
     (isa node58 node)

     })

(def world5-DoorKeyRules
  '#{
     ;Red Doors + Key
     (at redDoor node10)
     (isa redDoor door)
     (locked redDoor)
     (connects redDoor node10)
     (connects redDoor node17)
     (color redDoor Red)

     (isa redKey key)
     (manipulable redKey)
     (at redKey node7)
     (color redKey Red)

     ;Green Doors + Key
     (at greenDoor node29)
     (isa greenDoor door)
     (locked greenDoor)
     (connects greenDoor node29)
     (connects greenDoor node37)
     (color greenDoor Green)

     (at greenDoor2 node50)
     (isa greenDoor2 door)
     (locked greenDoor2)
     (connects greenDoor2 node50)
     (connects greenDoor2 node51)
     (color greenDoor2 Green)

     (isa greenKey key)
     (manipulable greenKey)
     (at greenKey node30)
     (color greenKey Green)

     ;Blue Doors + Key
     (at blueDoor node48)
     (isa blueDoor door)
     (locked blueDoor)
     (connects blueDoor node48)
     (connects blueDoor node47)
     (color blueDoor Blue)

     (at blueDoor2 node31)
     (isa blueDoor2 door)
     (locked blueDoor2)
     (connects blueDoor2 node31)
     (connects blueDoor2 node32)
     (color blueDoor2 Blue)

     (isa blueKey key)
     (manipulable blueKey)
     (at blueKey node9)
     (color blueKey Blue)

     ;Yellow Doors + Key
     (at yellowDoor node42)
     (isa yellowDoor door)
     (locked yellowDoor)
     (connects yellowDoor node42)
     (connects yellowDoor node52)
     (color yellowDoor Yellow)

     (at yellowDoor2 node53)
     (isa yellowDoor2 door)
     (locked yellowDoor2)
     (connects yellowDoor2 node53)
     (connects yellowDoor2 node50)
     (color yellowDoor2 Yellow)

     (isa yellowKey key)
     (manipulable yellowKey)
     (at yellowKey node19)
     (color yellowKey Yellow)


     ;Pink Doors + Key
     (at pinkDoor node37)
     (isa pinkDoor door)
     (locked pinkDoor)
     (connects pinkDoor node38)
     (connects pinkDoor node37)
     (color pinkDoor Pink)

     (at pinkDoor2 node39)
     (isa pinkDoor2 door)
     (locked pinkDoor2)
     (connects pinkDoor2 node39)
     (connects pinkDoor2 node38)
     (color pinkDoor2 Pink)

     (isa pinkKey key)
     (manipulable pinkKey)
     (at pinkKey node15)
     (color pinkKey Pink)

     ;Purple Doors + Key
     (at purpleDoor node28)
     (isa purpleDoor door)
     (locked purpleDoor)
     (connects purpleDoor node28)
     (connects purpleDoor node46)
     (color purpleDoor Purple)

     (at purpleDoor2 node36)
     (isa purpleDoor2 door)
     (locked purpleDoor2)
     (connects purpleDoor2 node36)
     (connects purpleDoor2 node35)
     (color purpleDoor2 Purple)

     (isa purpleKey key)
     (manipulable purpleKey)
     (at purpleKey node51)
     (color purpleKey Purple)
     }
  )

(def world5-agentRules-1agents
  '#{(agent R)
     (at R node1)
     (holding R nil)
     })

(def world5-agentRules-2agents
  '#{(agent R)
     (agent B)
     (at R node1)
     (at B node47)
     (holding R nil)
     (holding B nil)
     })

(def world5-test1
  (concat world5-nodeRules world5-agentRules-1agents world5-DoorKeyRules))

(def world5-test2
  (concat world5-nodeRules world5-agentRules-2agents world5-DoorKeyRules))